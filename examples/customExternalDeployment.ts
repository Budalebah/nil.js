import { bytesToHex, decodeFunctionResult, encodeFunctionData } from "viem";
import {
  Faucet,
  HttpTransport,
  LocalECDSAKeySigner,
  PublicClient,
  WalletV1,
  convertEthToWei,
  externalDeploymentMessage,
  generateRandomPrivateKey,
  waitTillCompleted,
} from "../src";
import type { Abi } from "abitype";

const client = new PublicClient({
  transport: new HttpTransport({
    endpoint:
      "https://api.devnet.nil.foundation/api/khannanov/5b68db962f4ca117c69a04a37dc95e0c",
  }),
  shardId: 1,
});

const signer = new LocalECDSAKeySigner({
  privateKey: generateRandomPrivateKey(),
});

const pubkey = await signer.getPublicKey();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Pub key: ${pubkey}`);

const wallet = new WalletV1({
  pubkey: pubkey,
  salt: 666n,
  shardId: 1,
  client,
  signer,
});
const walletAddress = await wallet.getAddressHex();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("walletAddress", walletAddress);

const faucet = new Faucet(client);

const faucetHash = await faucet.withdrawToWithRetry(
  walletAddress,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, faucetHash);
await wallet.selfDeploy(true);

const chainId = await client.chainId();

const deploymentMessageRetailer = externalDeploymentMessage(
  {
    salt: BigInt(Math.floor(Math.random() * 10000)),
    shard: 1,
    bytecode:
      "0x6080604052348015600e575f80fd5b5061080c8061001c5f395ff3fe60806040526004361061002c575f3560e01c806320367b3f14610037578063796d7f561461005357610033565b3661003357005b5f80fd5b610051600480360381019061004c91906102f1565b61008f565b005b34801561005e575f80fd5b50610079600480360381019061007491906104b9565b61015d565b604051610086919061052d565b60405180910390f35b6101573333620186a05f620f424087876040516024016100b0929190610582565b6040516020818303038152906040527f02ec06be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508973ffffffffffffffffffffffffffffffffffffffff16610168909695949392919063ffffffff16565b50505050565b5f6001905092915050565b5f606061017b898989898989878a610189565b915050979650505050505050565b5f8060fd73ffffffffffffffffffffffffffffffffffffffff16632495aa6d86888d8d8d8d8b8b6040518963ffffffff1660e01b81526004016101d29796959493929190610706565b60206040518083038185885af11580156101ee573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061021391906107ab565b90508091505098975050505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61025f82610236565b9050919050565b61026f81610255565b8114610279575f80fd5b50565b5f8135905061028a81610266565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126102b1576102b0610290565b5b8235905067ffffffffffffffff8111156102ce576102cd610294565b5b6020830191508360018202830111156102ea576102e9610298565b5b9250929050565b5f805f604084860312156103085761030761022e565b5b5f6103158682870161027c565b935050602084013567ffffffffffffffff81111561033657610335610232565b5b6103428682870161029c565b92509250509250925092565b5f819050919050565b6103608161034e565b811461036a575f80fd5b50565b5f8135905061037b81610357565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103cb82610385565b810181811067ffffffffffffffff821117156103ea576103e9610395565b5b80604052505050565b5f6103fc610225565b905061040882826103c2565b919050565b5f67ffffffffffffffff82111561042757610426610395565b5b61043082610385565b9050602081019050919050565b828183375f83830152505050565b5f61045d6104588461040d565b6103f3565b90508281526020810184848401111561047957610478610381565b5b61048484828561043d565b509392505050565b5f82601f8301126104a05761049f610290565b5b81356104b084826020860161044b565b91505092915050565b5f80604083850312156104cf576104ce61022e565b5b5f6104dc8582860161036d565b925050602083013567ffffffffffffffff8111156104fd576104fc610232565b5b6105098582860161048c565b9150509250929050565b5f8115159050919050565b61052781610513565b82525050565b5f6020820190506105405f83018461051e565b92915050565b5f82825260208201905092915050565b5f6105618385610546565b935061056e83858461043d565b61057783610385565b840190509392505050565b5f6020820190508181035f83015261059b818486610556565b90509392505050565b6105ad81610255565b82525050565b6105bc8161034e565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6105f48161034e565b82525050565b604082015f82015161060e5f8501826105eb565b50602082015161062160208501826105eb565b50505050565b5f61063283836105fa565b60408301905092915050565b5f602082019050919050565b5f610654826105c2565b61065e81856105cc565b9350610669836105dc565b805f5b838110156106995781516106808882610627565b975061068b8361063e565b92505060018101905061066c565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6106d8826106a6565b6106e281856106b0565b93506106f28185602086016106c0565b6106fb81610385565b840191505092915050565b5f60e0820190506107195f83018a61051e565b61072660208301896105a4565b61073360408301886105a4565b61074060608301876105a4565b61074d60808301866105b3565b81810360a083015261075f818561064a565b905081810360c083015261077381846106ce565b905098975050505050505050565b61078a81610513565b8114610794575f80fd5b50565b5f815190506107a581610781565b92915050565b5f602082840312156107c0576107bf61022e565b5b5f6107cd84828501610797565b9150509291505056fea26469706673582212206931f8bcef3ed225e2f7e89c876a2158957f0152f224c63883d9a70aa40f433464736f6c634300081a0033",
  },
  chainId,
);
const addrR = bytesToHex(deploymentMessageRetailer.to);
// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Retailer address: ", addrR);
const faucetHashRet = await faucet.withdrawToWithRetry(
  addrR,
  convertEthToWei(1),
);

const hash = await deploymentMessageRetailer.send(client);

await waitTillCompleted(client, 1, hash);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Retailer deployed successfully");

const deploymentMessageManufacturer = externalDeploymentMessage(
  {
    salt: BigInt(Math.floor(Math.random() * 10000)),
    shard: 4,
    bytecode:
      "0x608060405260405161188e38038061188e83398181016040528101906100259190610222565b815f90816100339190610489565b508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610558565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100da82610094565b810181811067ffffffffffffffff821117156100f9576100f86100a4565b5b80604052505050565b5f61010b61007b565b905061011782826100d1565b919050565b5f67ffffffffffffffff821115610136576101356100a4565b5b61013f82610094565b9050602081019050919050565b8281835e5f83830152505050565b5f61016c6101678461011c565b610102565b90508281526020810184848401111561018857610187610090565b5b61019384828561014c565b509392505050565b5f82601f8301126101af576101ae61008c565b5b81516101bf84826020860161015a565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101f1826101c8565b9050919050565b610201816101e7565b811461020b575f80fd5b50565b5f8151905061021c816101f8565b92915050565b5f806040838503121561023857610237610084565b5b5f83015167ffffffffffffffff81111561025557610254610088565b5b6102618582860161019b565b92505060206102728582860161020e565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806102ca57607f821691505b6020821081036102dd576102dc610286565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261033f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610304565b6103498683610304565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61038d61038861038384610361565b61036a565b610361565b9050919050565b5f819050919050565b6103a683610373565b6103ba6103b282610394565b848454610310565b825550505050565b5f90565b6103ce6103c2565b6103d981848461039d565b505050565b5b818110156103fc576103f15f826103c6565b6001810190506103df565b5050565b601f82111561044157610412816102e3565b61041b846102f5565b8101602085101561042a578190505b61043e610436856102f5565b8301826103de565b50505b505050565b5f82821c905092915050565b5f6104615f1984600802610446565b1980831691505092915050565b5f6104798383610452565b9150826002028217905092915050565b6104928261027c565b67ffffffffffffffff8111156104ab576104aa6100a4565b5b6104b582546102b3565b6104c0828285610400565b5f60209050601f8311600181146104f1575f84156104df578287015190505b6104e9858261046e565b865550610550565b601f1984166104ff866102e3565b5f5b8281101561052657848901518255600182019150602085019450602081019050610501565b86831015610543578489015161053f601f891682610452565b8355505b6001600288020188555050505b505050505050565b611329806105655f395ff3fe60806040526004361061004d575f3560e01c806302ec06be146100585780634de91a6314610088578063796d7f56146100b25780637acc0b20146100ee578063c29b2f201461012b57610054565b3661005457005b5f80fd5b610072600480360381019061006d919061085b565b610156565b60405161007f91906108c0565b60405180910390f35b348015610093575f80fd5b5061009c6102aa565b6040516100a991906108f1565b60405180910390f35b3480156100bd575f80fd5b506100d860048036038101906100d39190610989565b6102b0565b6040516100e591906108c0565b60405180910390f35b3480156100f9575f80fd5b50610114600480360381019061010f91906109e6565b61038f565b604051610122929190610a81565b60405180910390f35b348015610136575f80fd5b5061013f610435565b60405161014d929190610c69565b60405180910390f35b5f61015f6105e0565b61019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019590610d0e565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102a0576040518060400160405280600354815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060025f60035481526020019081526020015f205f820151815f0155602082015181600101908161027c9190610f53565b5090505060035f8154809291906102929061104f565b9190505550600190506102a4565b5f90505b92915050565b60035481565b5f6103865f80546102c090610d86565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec90610d86565b80156103375780601f1061030e57610100808354040283529160200191610337565b820191905f5260205f20905b81548152906001019060200180831161031a57829003601f168201915b50505050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506106ec565b90509392505050565b6002602052805f5260405f205f91509050805f0154908060010180546103b490610d86565b80601f01602080910402602001604051908101604052809291908181526020018280546103e090610d86565b801561042b5780601f106104025761010080835404028352916020019161042b565b820191905f5260205f20905b81548152906001019060200180831161040e57829003601f168201915b5050505050905082565b6060805f60035467ffffffffffffffff81111561045557610454610d2c565b5b6040519080825280602002602001820160405280156104835781602001602082028036833780820191505090505b5090505f60035467ffffffffffffffff8111156104a3576104a2610d2c565b5b6040519080825280602002602001820160405280156104d657816020015b60608152602001906001900390816104c15790505b5090505f5b6003548110156105d3575f60025f8381526020019081526020015f209050805f01548483815181106105105761050f611096565b5b60200260200101818152505080600101805461052b90610d86565b80601f016020809104026020016040519081016040528092919081815260200182805461055790610d86565b80156105a25780601f10610579576101008083540402835291602001916105a2565b820191905f5260205f20905b81548152906001019060200180831161058557829003601f168201915b50505050508383815181106105ba576105b9611096565b5b60200260200101819052505080806001019150506104db565b5081819350935050509091565b5f60605f8060ff73ffffffffffffffffffffffffffffffffffffffff168360405161060b9190611107565b5f60405180830381855afa9150503d805f8114610643576040519150601f19603f3d011682016040523d82523d5f602084013e610648565b606091505b50915091508161068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490611167565b60405180910390fd5b5f8151116106d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c7906111f5565b60405180910390fd5b808060200190518101906106e4919061123d565b935050505090565b5f80848484604051602001610703939291906112b0565b60405160208183030381529060405290505f80606060fe73ffffffffffffffffffffffffffffffffffffffff168460405161073e9190611107565b5f60405180830381855afa9150503d805f8114610776576040519150601f19603f3d011682016040523d82523d5f602084013e61077b565b606091505b508092508194505050826107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90611167565b60405180910390fd5b5f815111156107e457808060200190518101906107e1919061123d565b91505b819450505050509392505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261081b5761081a6107fa565b5b8235905067ffffffffffffffff811115610838576108376107fe565b5b60208301915083600182028301111561085457610853610802565b5b9250929050565b5f8060208385031215610871576108706107f2565b5b5f83013567ffffffffffffffff81111561088e5761088d6107f6565b5b61089a85828601610806565b92509250509250929050565b5f8115159050919050565b6108ba816108a6565b82525050565b5f6020820190506108d35f8301846108b1565b92915050565b5f819050919050565b6108eb816108d9565b82525050565b5f6020820190506109045f8301846108e2565b92915050565b610913816108d9565b811461091d575f80fd5b50565b5f8135905061092e8161090a565b92915050565b5f8083601f840112610949576109486107fa565b5b8235905067ffffffffffffffff811115610966576109656107fe565b5b60208301915083600182028301111561098257610981610802565b5b9250929050565b5f805f604084860312156109a05761099f6107f2565b5b5f6109ad86828701610920565b935050602084013567ffffffffffffffff8111156109ce576109cd6107f6565b5b6109da86828701610934565b92509250509250925092565b5f602082840312156109fb576109fa6107f2565b5b5f610a0884828501610920565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a5382610a11565b610a5d8185610a1b565b9350610a6d818560208601610a2b565b610a7681610a39565b840191505092915050565b5f604082019050610a945f8301856108e2565b8181036020830152610aa68184610a49565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610ae1816108d9565b82525050565b5f610af28383610ad8565b60208301905092915050565b5f602082019050919050565b5f610b1482610aaf565b610b1e8185610ab9565b9350610b2983610ac9565b805f5b83811015610b59578151610b408882610ae7565b9750610b4b83610afe565b925050600181019050610b2c565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610ba982610a11565b610bb38185610b8f565b9350610bc3818560208601610a2b565b610bcc81610a39565b840191505092915050565b5f610be28383610b9f565b905092915050565b5f602082019050919050565b5f610c0082610b66565b610c0a8185610b70565b935083602082028501610c1c85610b80565b805f5b85811015610c575784840389528151610c388582610bd7565b9450610c4383610bea565b925060208a01995050600181019050610c1f565b50829750879550505050505092915050565b5f6040820190508181035f830152610c818185610b0a565b90508181036020830152610c958184610bf6565b90509392505050565b7f547279696e6720746f2063616c6c20696e7465726e616c2066756e6374696f6e5f8201527f20776974682065787465726e616c206d65737361676500000000000000000000602082015250565b5f610cf8603683610a1b565b9150610d0382610c9e565b604082019050919050565b5f6020820190508181035f830152610d2581610cec565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610d9d57607f821691505b602082108103610db057610daf610d59565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610e127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610dd7565b610e1c8683610dd7565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610e57610e52610e4d846108d9565b610e34565b6108d9565b9050919050565b5f819050919050565b610e7083610e3d565b610e84610e7c82610e5e565b848454610de3565b825550505050565b5f90565b610e98610e8c565b610ea3818484610e67565b505050565b5b81811015610ec657610ebb5f82610e90565b600181019050610ea9565b5050565b601f821115610f0b57610edc81610db6565b610ee584610dc8565b81016020851015610ef4578190505b610f08610f0085610dc8565b830182610ea8565b50505b505050565b5f82821c905092915050565b5f610f2b5f1984600802610f10565b1980831691505092915050565b5f610f438383610f1c565b9150826002028217905092915050565b610f5c82610a11565b67ffffffffffffffff811115610f7557610f74610d2c565b5b610f7f8254610d86565b610f8a828285610eca565b5f60209050601f831160018114610fbb575f8415610fa9578287015190505b610fb38582610f38565b86555061101a565b601f198416610fc986610db6565b5f5b82811015610ff057848901518255600182019150602085019450602081019050610fcb565b8683101561100d5784890151611009601f891682610f1c565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611059826108d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361108b5761108a611022565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f6110e1826110c3565b6110eb81856110cd565b93506110fb818560208601610a2b565b80840191505092915050565b5f61111282846110d7565b915081905092915050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f611151602083610a1b565b915061115c8261111d565b602082019050919050565b5f6020820190508181035f83015261117e81611145565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f6111df602a83610a1b565b91506111ea82611185565b604082019050919050565b5f6020820190508181035f83015261120c816111d3565b9050919050565b61121c816108a6565b8114611226575f80fd5b50565b5f8151905061123781611213565b92915050565b5f60208284031215611252576112516107f2565b5b5f61125f84828501611229565b91505092915050565b5f82825260208201905092915050565b5f611282826110c3565b61128c8185611268565b935061129c818560208601610a2b565b6112a581610a39565b840191505092915050565b5f6060820190508181035f8301526112c88186611278565b90506112d760208301856108e2565b81810360408301526112e98184611278565b905094935050505056fea2646970667358221220ae7d1e00a147a45870dc953c80f9387e024fe0880ca699269ea58bcd451ef4d864736f6c634300081a0033",
    abi: [
      {
        inputs: [
          { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
          {
            internalType: "address",
            name: "_retailerContractAddress",
            type: "address",
          },
        ],
        stateMutability: "payable",
        type: "constructor",
      },
      {
        inputs: [
          { internalType: "string", name: "productName", type: "string" },
        ],
        name: "createProduct",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [],
        name: "getProducts",
        outputs: [
          { internalType: "uint256[]", name: "", type: "uint256[]" },
          { internalType: "string[]", name: "", type: "string[]" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "nextProductId",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        name: "products",
        outputs: [
          { internalType: "uint256", name: "id", type: "uint256" },
          { internalType: "string", name: "name", type: "string" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "hash", type: "uint256" },
          { internalType: "bytes", name: "signature", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    args: [bytesToHex(pubkey), addrR],
  },
  chainId,
);

const addrM = bytesToHex(deploymentMessageManufacturer.to);
// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Manufacturer address: ", addrM);
const faucetHashM = await faucet.withdrawToWithRetry(addrM, convertEthToWei(1));

const hashM = await deploymentMessageManufacturer.send(client);

await waitTillCompleted(client, 4, hashM);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Manufacturer deployed successfully");

const hashProduct = await wallet.sendMessage({
  to: addrR,
  data: encodeFunctionData({
    abi: [
      {
        inputs: [
          { internalType: "address", name: "dst", type: "address" },
          { internalType: "string", name: "name", type: "string" },
        ],
        name: "orderProduct",
        outputs: [],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "hash", type: "uint256" },
          { internalType: "bytes", name: "_authData", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "orderProduct",
    args: [addrM, "another-product"],
  }),
  gas: 100_000n,
  value: 5_000_000n,
});

await waitTillCompleted(client, 1, hashProduct);

// const orderMessage = new ExternalMessageEnvelope({
//   isDeploy: false,
//   to: hexToBytes(addrR),
//   chainId,
//   seqno: await client.getMessageCount(addrR, "latest"),
//   data: hexToBytes(
//     encodeFunctionData({
//       abi: [
//         {
//           inputs: [
//             { internalType: "address", name: "dst", type: "address" },
//             { internalType: "string", name: "name", type: "string" },
//           ],
//           name: "orderProduct",
//           outputs: [],
//           stateMutability: "payable",
//           type: "function",
//         },
//         {
//           inputs: [
//             { internalType: "uint256", name: "hash", type: "uint256" },
//             { internalType: "bytes", name: "_authData", type: "bytes" },
//           ],
//           name: "verifyExternal",
//           outputs: [{ internalType: "bool", name: "", type: "bool" }],
//           stateMutability: "view",
//           type: "function",
//         },
//         { stateMutability: "payable", type: "receive" },
//       ] as Abi,
//       functionName: "orderProduct",
//       args: [addrM, "new-product"],
//     }),
//   ),
//   authData: new Uint8Array(0),
// });

// const encodedOrderMessage = orderMessage.encode();

// const orderMessageHash = await client.sendRawMessage(
//   bytesToHex(encodedOrderMessage),
// );

// await waitTillCompleted(client, 1, orderMessageHash);

// const getProductsMessage = new ExternalMessageEnvelope({
//   isDeploy: false,
//   to: hexToBytes(addrM),
//   chainId,
//   seqno: await client.getMessageCount(addrM, "latest"),
//   data: hexToBytes(
//     encodeFunctionData({
//       abi: [
//         {
//           inputs: [
//             { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
//             {
//               internalType: "address",
//               name: "_retailerContractAddress",
//               type: "address",
//             },
//           ],
//           stateMutability: "payable",
//           type: "constructor",
//         },
//         {
//           inputs: [
//             { internalType: "string", name: "productName", type: "string" },
//           ],
//           name: "createProduct",
//           outputs: [{ internalType: "bool", name: "", type: "bool" }],
//           stateMutability: "payable",
//           type: "function",
//         },
//         {
//           inputs: [],
//           name: "getProducts",
//           outputs: [
//             { internalType: "uint256[]", name: "", type: "uint256[]" },
//             { internalType: "string[]", name: "", type: "string[]" },
//           ],
//           stateMutability: "view",
//           type: "function",
//         },
//         {
//           inputs: [],
//           name: "nextProductId",
//           outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
//           stateMutability: "view",
//           type: "function",
//         },
//         {
//           inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
//           name: "products",
//           outputs: [
//             { internalType: "uint256", name: "id", type: "uint256" },
//             { internalType: "string", name: "name", type: "string" },
//           ],
//           stateMutability: "view",
//           type: "function",
//         },
//         {
//           inputs: [
//             { internalType: "uint256", name: "hash", type: "uint256" },
//             { internalType: "bytes", name: "signature", type: "bytes" },
//           ],
//           name: "verifyExternal",
//           outputs: [{ internalType: "bool", name: "", type: "bool" }],
//           stateMutability: "view",
//           type: "function",
//         },
//         { stateMutability: "payable", type: "receive" },
//       ] as Abi,
//       functionName: "getProducts",
//       args: [],
//     }),
//   ),
//   authData: new Uint8Array(0),
// });

// await getProductsMessage.updateAuthdata(signer);

// const productsMessageHash = await client.sendRawMessage(
//   bytesToHex(getProductsMessage.encode()),
// );

// await waitTillCompleted(client, 4, productsMessageHash);

// // biome-ignore lint/nursery/noConsole: <explanation>
// console.log(`Message hash: ${productsMessageHash}`);

const resultsCall = await client.call(
  {
    from: addrM,
    to: addrM,
    data: encodeFunctionData({
      abi: [
        {
          inputs: [
            { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
            {
              internalType: "address",
              name: "_retailerContractAddress",
              type: "address",
            },
          ],
          stateMutability: "payable",
          type: "constructor",
        },
        {
          inputs: [
            { internalType: "string", name: "productName", type: "string" },
          ],
          name: "createProduct",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "getProducts",
          outputs: [
            { internalType: "uint256[]", name: "", type: "uint256[]" },
            { internalType: "string[]", name: "", type: "string[]" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "nextProductId",
          outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          name: "products",
          outputs: [
            { internalType: "uint256", name: "id", type: "uint256" },
            { internalType: "string", name: "name", type: "string" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            { internalType: "uint256", name: "hash", type: "uint256" },
            { internalType: "bytes", name: "signature", type: "bytes" },
          ],
          name: "verifyExternal",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "view",
          type: "function",
        },
        { stateMutability: "payable", type: "receive" },
      ] as Abi,
      functionName: "getProducts",
      args: [],
    }),
  },
  "latest",
);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(
  "getProducts",
  decodeFunctionResult({
    abi: [
      {
        inputs: [
          { internalType: "bytes", name: "_pubkey", type: "bytes" },
          {
            internalType: "address",
            name: "_retailerContractAddress",
            type: "address",
          },
        ],
        stateMutability: "payable",
        type: "constructor",
      },
      {
        inputs: [{ internalType: "string", name: "name", type: "string" }],
        name: "createProduct",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "getProducts",
        outputs: [
          { internalType: "uint256[]", name: "", type: "uint256[]" },
          { internalType: "string[]", name: "", type: "string[]" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "nextProductId",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        name: "products",
        outputs: [
          { internalType: "uint256", name: "id", type: "uint256" },
          { internalType: "string", name: "name", type: "string" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "hash", type: "uint256" },
          { internalType: "bytes", name: "signature", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "getProducts",
    data: resultsCall,
  }),
);
