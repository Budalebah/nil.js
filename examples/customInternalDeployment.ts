import {
  bytesToHex,
  decodeFunctionResult,
  encodeFunctionData,
  type Abi,
} from "viem";
import {
  Faucet,
  LocalECDSAKeySigner,
  HttpTransport,
  PublicClient,
  generateRandomPrivateKey,
  WalletV1,
  waitTillCompleted,
  convertEthToWei,
} from "../src";

const client = new PublicClient({
  transport: new HttpTransport({
    endpoint: "http://127.0.0.1:8529",
  }),
  shardId: 1,
});
const faucet = new Faucet(client);

const signer = new LocalECDSAKeySigner({
  privateKey: generateRandomPrivateKey(),
});

const pubkey = await signer.getPublicKey();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Pub key: ${pubkey}`);

const wallet = new WalletV1({
  pubkey: pubkey,
  salt: 6n,
  shardId: 1,
  client,
  signer,
});
const walletAddress = await wallet.getAddressHex();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("walletAddress", walletAddress);

const faucetHash = await faucet.withdrawToWithRetry(
  walletAddress,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, faucetHash);
await wallet.selfDeploy(true);

const { address: addressR, hash: hashR } = await wallet.deployContract({
  bytecode:
    "0x608060405234801561000f575f80fd5b506108268061001d5f395ff3fe60806040526004361061002c575f3560e01c806320367b3f14610037578063796d7f561461005357610033565b3661003357005b5f80fd5b610051600480360381019061004c91906102f1565b61008f565b005b34801561005e575f80fd5b50610079600480360381019061007491906104b9565b61015d565b604051610086919061052d565b60405180910390f35b6101573333620186a05f620f424087876040516024016100b0929190610582565b6040516020818303038152906040527f02ec06be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508973ffffffffffffffffffffffffffffffffffffffff16610168909695949392919063ffffffff16565b50505050565b5f6001905092915050565b5f606061017b898989898989878a610189565b915050979650505050505050565b5f8060fd73ffffffffffffffffffffffffffffffffffffffff16632495aa6d86888d8d8d8d8b8b6040518963ffffffff1660e01b81526004016101d29796959493929190610720565b60206040518083038185885af11580156101ee573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061021391906107c5565b90508091505098975050505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61025f82610236565b9050919050565b61026f81610255565b8114610279575f80fd5b50565b5f8135905061028a81610266565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126102b1576102b0610290565b5b8235905067ffffffffffffffff8111156102ce576102cd610294565b5b6020830191508360018202830111156102ea576102e9610298565b5b9250929050565b5f805f604084860312156103085761030761022e565b5b5f6103158682870161027c565b935050602084013567ffffffffffffffff81111561033657610335610232565b5b6103428682870161029c565b92509250509250925092565b5f819050919050565b6103608161034e565b811461036a575f80fd5b50565b5f8135905061037b81610357565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103cb82610385565b810181811067ffffffffffffffff821117156103ea576103e9610395565b5b80604052505050565b5f6103fc610225565b905061040882826103c2565b919050565b5f67ffffffffffffffff82111561042757610426610395565b5b61043082610385565b9050602081019050919050565b828183375f83830152505050565b5f61045d6104588461040d565b6103f3565b90508281526020810184848401111561047957610478610381565b5b61048484828561043d565b509392505050565b5f82601f8301126104a05761049f610290565b5b81356104b084826020860161044b565b91505092915050565b5f80604083850312156104cf576104ce61022e565b5b5f6104dc8582860161036d565b925050602083013567ffffffffffffffff8111156104fd576104fc610232565b5b6105098582860161048c565b9150509250929050565b5f8115159050919050565b61052781610513565b82525050565b5f6020820190506105405f83018461051e565b92915050565b5f82825260208201905092915050565b5f6105618385610546565b935061056e83858461043d565b61057783610385565b840190509392505050565b5f6020820190508181035f83015261059b818486610556565b90509392505050565b6105ad81610255565b82525050565b6105bc8161034e565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6105f48161034e565b82525050565b604082015f82015161060e5f8501826105eb565b50602082015161062160208501826105eb565b50505050565b5f61063283836105fa565b60408301905092915050565b5f602082019050919050565b5f610654826105c2565b61065e81856105cc565b9350610669836105dc565b805f5b838110156106995781516106808882610627565b975061068b8361063e565b92505060018101905061066c565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156106dd5780820151818401526020810190506106c2565b5f8484015250505050565b5f6106f2826106a6565b6106fc81856106b0565b935061070c8185602086016106c0565b61071581610385565b840191505092915050565b5f60e0820190506107335f83018a61051e565b61074060208301896105a4565b61074d60408301886105a4565b61075a60608301876105a4565b61076760808301866105b3565b81810360a0830152610779818561064a565b905081810360c083015261078d81846106e8565b905098975050505050505050565b6107a481610513565b81146107ae575f80fd5b50565b5f815190506107bf8161079b565b92915050565b5f602082840312156107da576107d961022e565b5b5f6107e7848285016107b1565b9150509291505056fea2646970667358221220596109e0e111d0e7b41972e1bbd8c627b7255bc65c9f5b308c9b4c8112dd010c64736f6c63430008150033",
  value: 1000000n,
  gas: 100000n,
  salt: BigInt(Math.floor(Math.random() * 10000)),
  shardId: 2,
  abi: [
    {
      inputs: [
        { internalType: "address", name: "dst", type: "address" },
        { internalType: "string", name: "name", type: "string" },
      ],
      name: "orderProduct",
      outputs: [],
      stateMutability: "payable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "uint256", name: "hash", type: "uint256" },
        { internalType: "bytes", name: "_authData", type: "bytes" },
      ],
      name: "verifyExternal",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "view",
      type: "function",
    },
    { stateMutability: "payable", type: "receive" },
  ] as Abi,
  args: [],
});

await waitTillCompleted(client, 1, hashR);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Retailer address: ${addressR}`);

const retailerWithdraw = await faucet.withdrawToWithRetry(
  addressR,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, retailerWithdraw);

const { address: addressM, hash: hashM } = await wallet.deployContract({
  bytecode:
    "0x60806040526040516200193e3803806200193e833981810160405281019062000029919062000268565b815f908162000039919062000503565b508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620005e7565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620000e3826200009b565b810181811067ffffffffffffffff82111715620001055762000104620000ab565b5b80604052505050565b5f6200011962000082565b9050620001278282620000d8565b919050565b5f67ffffffffffffffff821115620001495762000148620000ab565b5b62000154826200009b565b9050602081019050919050565b5f5b838110156200018057808201518184015260208101905062000163565b5f8484015250505050565b5f620001a16200019b846200012c565b6200010e565b905082815260208101848484011115620001c057620001bf62000097565b5b620001cd84828562000161565b509392505050565b5f82601f830112620001ec57620001eb62000093565b5b8151620001fe8482602086016200018b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620002328262000207565b9050919050565b620002448162000226565b81146200024f575f80fd5b50565b5f81519050620002628162000239565b92915050565b5f80604083850312156200028157620002806200008b565b5b5f83015167ffffffffffffffff811115620002a157620002a06200008f565b5b620002af85828601620001d5565b9250506020620002c28582860162000252565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200031b57607f821691505b602082108103620003315762000330620002d6565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000358565b620003a1868362000358565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003eb620003e5620003df84620003b9565b620003c2565b620003b9565b9050919050565b5f819050919050565b6200040683620003cb565b6200041e6200041582620003f2565b84845462000364565b825550505050565b5f90565b6200043462000426565b62000441818484620003fb565b505050565b5b8181101562000468576200045c5f826200042a565b60018101905062000447565b5050565b601f821115620004b757620004818162000337565b6200048c8462000349565b810160208510156200049c578190505b620004b4620004ab8562000349565b83018262000446565b50505b505050565b5f82821c905092915050565b5f620004d95f1984600802620004bc565b1980831691505092915050565b5f620004f38383620004c8565b9150826002028217905092915050565b6200050e82620002cc565b67ffffffffffffffff8111156200052a5762000529620000ab565b5b62000536825462000303565b620005438282856200046c565b5f60209050601f83116001811462000579575f841562000564578287015190505b620005708582620004e6565b865550620005df565b601f198416620005898662000337565b5f5b82811015620005b2578489015182556001820191506020850194506020810190506200058b565b86831015620005d25784890151620005ce601f891682620004c8565b8355505b6001600288020188555050505b505050505050565b61134980620005f55f395ff3fe60806040526004361061004d575f3560e01c806302ec06be146100585780634de91a6314610088578063796d7f56146100b25780637acc0b20146100ee578063c29b2f201461012b57610054565b3661005457005b5f80fd5b610072600480360381019061006d9190610861565b610156565b60405161007f91906108c6565b60405180910390f35b348015610093575f80fd5b5061009c6102aa565b6040516100a991906108f7565b60405180910390f35b3480156100bd575f80fd5b506100d860048036038101906100d3919061098f565b6102b0565b6040516100e591906108c6565b60405180910390f35b3480156100f9575f80fd5b50610114600480360381019061010f91906109ec565b61038f565b604051610122929190610aa1565b60405180910390f35b348015610136575f80fd5b5061013f610435565b60405161014d929190610c89565b60405180910390f35b5f61015f6105e6565b61019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019590610d2e565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102a0576040518060400160405280600354815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060025f60035481526020019081526020015f205f820151815f0155602082015181600101908161027c9190610f73565b5090505060035f8154809291906102929061106f565b9190505550600190506102a4565b5f90505b92915050565b60035481565b5f6103865f80546102c090610da6565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec90610da6565b80156103375780601f1061030e57610100808354040283529160200191610337565b820191905f5260205f20905b81548152906001019060200180831161031a57829003601f168201915b50505050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506106f2565b90509392505050565b6002602052805f5260405f205f91509050805f0154908060010180546103b490610da6565b80601f01602080910402602001604051908101604052809291908181526020018280546103e090610da6565b801561042b5780601f106104025761010080835404028352916020019161042b565b820191905f5260205f20905b81548152906001019060200180831161040e57829003601f168201915b5050505050905082565b6060805f60035467ffffffffffffffff81111561045557610454610d4c565b5b6040519080825280602002602001820160405280156104835781602001602082028036833780820191505090505b5090505f60035467ffffffffffffffff8111156104a3576104a2610d4c565b5b6040519080825280602002602001820160405280156104d657816020015b60608152602001906001900390816104c15790505b5090505f5b6003548110156105d9575f60025f8381526020019081526020015f209050805f01548483815181106105105761050f6110b6565b5b60200260200101818152505080600101805461052b90610da6565b80601f016020809104026020016040519081016040528092919081815260200182805461055790610da6565b80156105a25780601f10610579576101008083540402835291602001916105a2565b820191905f5260205f20905b81548152906001019060200180831161058557829003601f168201915b50505050508383815181106105ba576105b96110b6565b5b60200260200101819052505080806105d19061106f565b9150506104db565b5081819350935050509091565b5f60605f8060ff73ffffffffffffffffffffffffffffffffffffffff16836040516106119190611127565b5f60405180830381855afa9150503d805f8114610649576040519150601f19603f3d011682016040523d82523d5f602084013e61064e565b606091505b509150915081610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90611187565b60405180910390fd5b5f8151116106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90611215565b60405180910390fd5b808060200190518101906106ea919061125d565b935050505090565b5f80848484604051602001610709939291906112d0565b60405160208183030381529060405290505f80606060fe73ffffffffffffffffffffffffffffffffffffffff16846040516107449190611127565b5f60405180830381855afa9150503d805f811461077c576040519150601f19603f3d011682016040523d82523d5f602084013e610781565b606091505b508092508194505050826107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190611187565b60405180910390fd5b5f815111156107ea57808060200190518101906107e7919061125d565b91505b819450505050509392505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261082157610820610800565b5b8235905067ffffffffffffffff81111561083e5761083d610804565b5b60208301915083600182028301111561085a57610859610808565b5b9250929050565b5f8060208385031215610877576108766107f8565b5b5f83013567ffffffffffffffff811115610894576108936107fc565b5b6108a08582860161080c565b92509250509250929050565b5f8115159050919050565b6108c0816108ac565b82525050565b5f6020820190506108d95f8301846108b7565b92915050565b5f819050919050565b6108f1816108df565b82525050565b5f60208201905061090a5f8301846108e8565b92915050565b610919816108df565b8114610923575f80fd5b50565b5f8135905061093481610910565b92915050565b5f8083601f84011261094f5761094e610800565b5b8235905067ffffffffffffffff81111561096c5761096b610804565b5b60208301915083600182028301111561098857610987610808565b5b9250929050565b5f805f604084860312156109a6576109a56107f8565b5b5f6109b386828701610926565b935050602084013567ffffffffffffffff8111156109d4576109d36107fc565b5b6109e08682870161093a565b92509250509250925092565b5f60208284031215610a0157610a006107f8565b5b5f610a0e84828501610926565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610a4e578082015181840152602081019050610a33565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610a7382610a17565b610a7d8185610a21565b9350610a8d818560208601610a31565b610a9681610a59565b840191505092915050565b5f604082019050610ab45f8301856108e8565b8181036020830152610ac68184610a69565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610b01816108df565b82525050565b5f610b128383610af8565b60208301905092915050565b5f602082019050919050565b5f610b3482610acf565b610b3e8185610ad9565b9350610b4983610ae9565b805f5b83811015610b79578151610b608882610b07565b9750610b6b83610b1e565b925050600181019050610b4c565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610bc982610a17565b610bd38185610baf565b9350610be3818560208601610a31565b610bec81610a59565b840191505092915050565b5f610c028383610bbf565b905092915050565b5f602082019050919050565b5f610c2082610b86565b610c2a8185610b90565b935083602082028501610c3c85610ba0565b805f5b85811015610c775784840389528151610c588582610bf7565b9450610c6383610c0a565b925060208a01995050600181019050610c3f565b50829750879550505050505092915050565b5f6040820190508181035f830152610ca18185610b2a565b90508181036020830152610cb58184610c16565b90509392505050565b7f547279696e6720746f2063616c6c20696e7465726e616c2066756e6374696f6e5f8201527f20776974682065787465726e616c206d65737361676500000000000000000000602082015250565b5f610d18603683610a21565b9150610d2382610cbe565b604082019050919050565b5f6020820190508181035f830152610d4581610d0c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610dbd57607f821691505b602082108103610dd057610dcf610d79565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610e327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610df7565b610e3c8683610df7565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610e77610e72610e6d846108df565b610e54565b6108df565b9050919050565b5f819050919050565b610e9083610e5d565b610ea4610e9c82610e7e565b848454610e03565b825550505050565b5f90565b610eb8610eac565b610ec3818484610e87565b505050565b5b81811015610ee657610edb5f82610eb0565b600181019050610ec9565b5050565b601f821115610f2b57610efc81610dd6565b610f0584610de8565b81016020851015610f14578190505b610f28610f2085610de8565b830182610ec8565b50505b505050565b5f82821c905092915050565b5f610f4b5f1984600802610f30565b1980831691505092915050565b5f610f638383610f3c565b9150826002028217905092915050565b610f7c82610a17565b67ffffffffffffffff811115610f9557610f94610d4c565b5b610f9f8254610da6565b610faa828285610eea565b5f60209050601f831160018114610fdb575f8415610fc9578287015190505b610fd38582610f58565b86555061103a565b601f198416610fe986610dd6565b5f5b8281101561101057848901518255600182019150602085019450602081019050610feb565b8683101561102d5784890151611029601f891682610f3c565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611079826108df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110ab576110aa611042565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f611101826110e3565b61110b81856110ed565b935061111b818560208601610a31565b80840191505092915050565b5f61113282846110f7565b915081905092915050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f611171602083610a21565b915061117c8261113d565b602082019050919050565b5f6020820190508181035f83015261119e81611165565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f6111ff602a83610a21565b915061120a826111a5565b604082019050919050565b5f6020820190508181035f83015261122c816111f3565b9050919050565b61123c816108ac565b8114611246575f80fd5b50565b5f8151905061125781611233565b92915050565b5f60208284031215611272576112716107f8565b5b5f61127f84828501611249565b91505092915050565b5f82825260208201905092915050565b5f6112a2826110e3565b6112ac8185611288565b93506112bc818560208601610a31565b6112c581610a59565b840191505092915050565b5f6060820190508181035f8301526112e88186611298565b90506112f760208301856108e8565b81810360408301526113098184611298565b905094935050505056fea2646970667358221220d9d7265ed6772161ecf71fd37ccc1f7d3a748945eab77032fb23200b167d851764736f6c63430008150033",
  value: 1000000n,
  gas: 100000n,
  salt: BigInt(Math.floor(Math.random() * 10000)),
  shardId: 3,
  abi: [
    {
      inputs: [
        { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
        {
          internalType: "address",
          name: "_retailerContractAddress",
          type: "address",
        },
      ],
      stateMutability: "payable",
      type: "constructor",
    },
    {
      inputs: [{ internalType: "string", name: "productName", type: "string" }],
      name: "createProduct",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "payable",
      type: "function",
    },
    {
      inputs: [],
      name: "getProducts",
      outputs: [
        { internalType: "uint256[]", name: "", type: "uint256[]" },
        { internalType: "string[]", name: "", type: "string[]" },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "nextProductId",
      outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      name: "products",
      outputs: [
        { internalType: "uint256", name: "id", type: "uint256" },
        { internalType: "string", name: "name", type: "string" },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        { internalType: "uint256", name: "hash", type: "uint256" },
        { internalType: "bytes", name: "signature", type: "bytes" },
      ],
      name: "verifyExternal",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "view",
      type: "function",
    },
    { stateMutability: "payable", type: "receive" },
  ] as Abi,
  args: [bytesToHex(pubkey), addressR],
});

await waitTillCompleted(client, 1, hashM);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Manufacturer address: ${addressM}`);

const hashFunds = await faucet.withdrawToWithRetry(
  addressR,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, hashFunds);

const hashProduct = await wallet.sendMessage({
  to: addressR,
  data: encodeFunctionData({
    abi: [
      {
        inputs: [
          { internalType: "address", name: "dst", type: "address" },
          { internalType: "string", name: "name", type: "string" },
        ],
        name: "orderProduct",
        outputs: [],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "hash", type: "uint256" },
          { internalType: "bytes", name: "_authData", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "orderProduct",
    args: [addressM, "another-product"],
  }),
  gas: 100_000n,
  value: 1_000_000n,
});

await waitTillCompleted(client, 1, hashProduct);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Product created!");

const resultsCall = await client.call(
  {
    from: walletAddress,
    to: addressM,
    gasLimit: 100_000n,
    value: 1_000_000n,
    data: encodeFunctionData({
      abi: [
        {
          inputs: [
            { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
            {
              internalType: "address",
              name: "_retailerContractAddress",
              type: "address",
            },
          ],
          stateMutability: "payable",
          type: "constructor",
        },
        {
          inputs: [
            { internalType: "string", name: "productName", type: "string" },
          ],
          name: "createProduct",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "getProducts",
          outputs: [
            { internalType: "uint256[]", name: "", type: "uint256[]" },
            { internalType: "string[]", name: "", type: "string[]" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "nextProductId",
          outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          name: "products",
          outputs: [
            { internalType: "uint256", name: "id", type: "uint256" },
            { internalType: "string", name: "name", type: "string" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            { internalType: "uint256", name: "hash", type: "uint256" },
            { internalType: "bytes", name: "signature", type: "bytes" },
          ],
          name: "verifyExternal",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "view",
          type: "function",
        },
        { stateMutability: "payable", type: "receive" },
      ] as Abi,
      functionName: "getProducts",
      args: [],
    }),
  },
  "latest",
);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(
  "getProducts",
  decodeFunctionResult({
    abi: [
      {
        inputs: [
          { internalType: "bytes", name: "pubkeyOne", type: "bytes" },
          {
            internalType: "address",
            name: "_retailerContractAddress",
            type: "address",
          },
        ],
        stateMutability: "payable",
        type: "constructor",
      },
      {
        inputs: [
          { internalType: "string", name: "productName", type: "string" },
        ],
        name: "createProduct",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [],
        name: "getProducts",
        outputs: [
          { internalType: "uint256[]", name: "", type: "uint256[]" },
          { internalType: "string[]", name: "", type: "string[]" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "nextProductId",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        name: "products",
        outputs: [
          { internalType: "uint256", name: "id", type: "uint256" },
          { internalType: "string", name: "name", type: "string" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "hash", type: "uint256" },
          { internalType: "bytes", name: "signature", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "getProducts",
    data: resultsCall,
  }),
);
