import { bytesToHex, encodeFunctionData, type Abi } from "viem";
import {
  Faucet,
  LocalECDSAKeySigner,
  HttpTransport,
  PublicClient,
  generateRandomPrivateKey,
  WalletV1,
  waitTillCompleted,
  convertEthToWei,
} from "../src";

const client = new PublicClient({
  transport: new HttpTransport({
    endpoint: "http://127.0.0.1:8529",
  }),
  shardId: 1,
});
const faucet = new Faucet(client);

const signer = new LocalECDSAKeySigner({
  privateKey: generateRandomPrivateKey(),
});

const pubkey = await signer.getPublicKey();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Pub key: ${pubkey}`);

const wallet = new WalletV1({
  pubkey: pubkey,
  salt: 6n,
  shardId: 1,
  client,
  signer,
});
const walletAddress = await wallet.getAddressHex();

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("walletAddress", walletAddress);

const faucetHash = await faucet.withdrawToWithRetry(
  walletAddress,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, faucetHash);
await wallet.selfDeploy(true);

const { address: addressR, hash: hashR } = await wallet.deployContract({
  bytecode:
    "0x6080604052348015600e575f80fd5b506106068061001c5f395ff3fe608060405260043610610021575f3560e01c806320367b3f1461002c57610028565b3661002857005b5f80fd5b348015610037575f80fd5b50610052600480360381019061004d91906102a2565b610054565b005b61011c3333620186a05f620f42408787604051602401610075929190610359565b6040516020818303038152906040527f02ec06be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508973ffffffffffffffffffffffffffffffffffffffff16610122909695949392919063ffffffff16565b50505050565b5f6060610135898989898989878a610143565b915050979650505050505050565b5f8060fd73ffffffffffffffffffffffffffffffffffffffff16632495aa6d86888d8d8d8d8b8b6040518963ffffffff1660e01b815260040161018c9796959493929190610500565b60206040518083038185885af11580156101a8573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906101cd91906105a5565b90508091505098975050505050505050565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610210826101e7565b9050919050565b61022081610206565b811461022a575f80fd5b50565b5f8135905061023b81610217565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261026257610261610241565b5b8235905067ffffffffffffffff81111561027f5761027e610245565b5b60208301915083600182028301111561029b5761029a610249565b5b9250929050565b5f805f604084860312156102b9576102b86101df565b5b5f6102c68682870161022d565b935050602084013567ffffffffffffffff8111156102e7576102e66101e3565b5b6102f38682870161024d565b92509250509250925092565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f61033883856102ff565b935061034583858461030f565b61034e8361031d565b840190509392505050565b5f6020820190508181035f83015261037281848661032d565b90509392505050565b5f8115159050919050565b61038f8161037b565b82525050565b61039e81610206565b82525050565b5f819050919050565b6103b6816103a4565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6103ee816103a4565b82525050565b604082015f8201516104085f8501826103e5565b50602082015161041b60208501826103e5565b50505050565b5f61042c83836103f4565b60408301905092915050565b5f602082019050919050565b5f61044e826103bc565b61045881856103c6565b9350610463836103d6565b805f5b8381101561049357815161047a8882610421565b975061048583610438565b925050600181019050610466565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6104d2826104a0565b6104dc81856104aa565b93506104ec8185602086016104ba565b6104f58161031d565b840191505092915050565b5f60e0820190506105135f83018a610386565b6105206020830189610395565b61052d6040830188610395565b61053a6060830187610395565b61054760808301866103ad565b81810360a08301526105598185610444565b905081810360c083015261056d81846104c8565b905098975050505050505050565b6105848161037b565b811461058e575f80fd5b50565b5f8151905061059f8161057b565b92915050565b5f602082840312156105ba576105b96101df565b5b5f6105c784828501610591565b9150509291505056fea264697066735822122006ac6a1a1b7287d3ed4d9907d6cef476e61cb762bd2f437d4399b997c2ed3ec164736f6c634300081a0033",
  value: 1000000n,
  gas: 100000n,
  salt: BigInt(Math.floor(Math.random() * 10000)),
  shardId: 2,
  abi: [
    {
      inputs: [
        { internalType: "address", name: "dst", type: "address" },
        { internalType: "string", name: "productName", type: "string" },
      ],
      name: "orderProduct",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
  ] as Abi,
  args: [],
});

await waitTillCompleted(client, 1, hashR);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Retailer address: ${addressR}`);

const { address: addressM, hash: hashM } = await wallet.deployContract({
  bytecode:
    "0x608060405260405161191238038061191283398181016040528101906100259190610222565b815f90816100339190610489565b508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610558565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100da82610094565b810181811067ffffffffffffffff821117156100f9576100f86100a4565b5b80604052505050565b5f61010b61007b565b905061011782826100d1565b919050565b5f67ffffffffffffffff821115610136576101356100a4565b5b61013f82610094565b9050602081019050919050565b8281835e5f83830152505050565b5f61016c6101678461011c565b610102565b90508281526020810184848401111561018857610187610090565b5b61019384828561014c565b509392505050565b5f82601f8301126101af576101ae61008c565b5b81516101bf84826020860161015a565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101f1826101c8565b9050919050565b610201816101e7565b811461020b575f80fd5b50565b5f8151905061021c816101f8565b92915050565b5f806040838503121561023857610237610084565b5b5f83015167ffffffffffffffff81111561025557610254610088565b5b6102618582860161019b565b92505060206102728582860161020e565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806102ca57607f821691505b6020821081036102dd576102dc610286565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261033f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610304565b6103498683610304565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61038d61038861038384610361565b61036a565b610361565b9050919050565b5f819050919050565b6103a683610373565b6103ba6103b282610394565b848454610310565b825550505050565b5f90565b6103ce6103c2565b6103d981848461039d565b505050565b5b818110156103fc576103f15f826103c6565b6001810190506103df565b5050565b601f82111561044157610412816102e3565b61041b846102f5565b8101602085101561042a578190505b61043e610436856102f5565b8301826103de565b50505b505050565b5f82821c905092915050565b5f6104615f1984600802610446565b1980831691505092915050565b5f6104798383610452565b9150826002028217905092915050565b6104928261027c565b67ffffffffffffffff8111156104ab576104aa6100a4565b5b6104b582546102b3565b6104c0828285610400565b5f60209050601f8311600181146104f1575f84156104df578287015190505b6104e9858261046e565b865550610550565b601f1984166104ff866102e3565b5f5b8281101561052657848901518255600182019150602085019450602081019050610501565b86831015610543578489015161053f601f891682610452565b8355505b6001600288020188555050505b505050505050565b6113ad806105655f395ff3fe60806040526004361061004d575f3560e01c806302ec06be146100585780634de91a6314610094578063796d7f56146100be5780637acc0b20146100fa578063c29b2f201461013757610054565b3661005457005b5f80fd5b348015610063575f80fd5b5061007e6004803603810190610079919061083c565b610162565b60405161008b91906108a1565b60405180910390f35b34801561009f575f80fd5b506100a86102b6565b6040516100b591906108d2565b60405180910390f35b3480156100c9575f80fd5b506100e460048036038101906100df9190610a4d565b6102bc565b6040516100f191906108a1565b60405180910390f35b348015610105575f80fd5b50610120600480360381019061011b9190610aa7565b610367565b60405161012e929190610b32565b60405180910390f35b348015610142575f80fd5b5061014b61040d565b604051610159929190610d1a565b60405180910390f35b5f61016b6105b8565b6101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a190610dbf565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102ac576040518060400160405280600354815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060025f60035481526020019081526020015f205f820151815f015560208201518160010190816102889190610fd7565b5090505060035f81548092919061029e906110d3565b9190505550600190506102b0565b5f90505b92915050565b60035481565b5f61034f5f80546102cc90610e0a565b80601f01602080910402602001604051908101604052809291908181526020018280546102f890610e0a565b80156103435780601f1061031a57610100808354040283529160200191610343565b820191905f5260205f20905b81548152906001019060200180831161032657829003601f168201915b505050505084846106c4565b1561035d5760019050610361565b5f90505b92915050565b6002602052805f5260405f205f91509050805f01549080600101805461038c90610e0a565b80601f01602080910402602001604051908101604052809291908181526020018280546103b890610e0a565b80156104035780601f106103da57610100808354040283529160200191610403565b820191905f5260205f20905b8154815290600101906020018083116103e657829003601f168201915b5050505050905082565b6060805f60035467ffffffffffffffff81111561042d5761042c610929565b5b60405190808252806020026020018201604052801561045b5781602001602082028036833780820191505090505b5090505f60035467ffffffffffffffff81111561047b5761047a610929565b5b6040519080825280602002602001820160405280156104ae57816020015b60608152602001906001900390816104995790505b5090505f5b6003548110156105ab575f60025f8381526020019081526020015f209050805f01548483815181106104e8576104e761111a565b5b60200260200101818152505080600101805461050390610e0a565b80601f016020809104026020016040519081016040528092919081815260200182805461052f90610e0a565b801561057a5780601f106105515761010080835404028352916020019161057a565b820191905f5260205f20905b81548152906001019060200180831161055d57829003601f168201915b50505050508383815181106105925761059161111a565b5b60200260200101819052505080806001019150506104b3565b5081819350935050509091565b5f60605f8060ff73ffffffffffffffffffffffffffffffffffffffff16836040516105e3919061118b565b5f60405180830381855afa9150503d805f811461061b576040519150601f19603f3d011682016040523d82523d5f602084013e610620565b606091505b509150915081610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c906111eb565b60405180910390fd5b5f8151116106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f90611279565b60405180910390fd5b808060200190518101906106bc91906112c1565b935050505090565b5f808484846040516020016106db93929190611334565b60405160208183030381529060405290505f80606060fe73ffffffffffffffffffffffffffffffffffffffff1684604051610716919061118b565b5f60405180830381855afa9150503d805f811461074e576040519150601f19603f3d011682016040523d82523d5f602084013e610753565b606091505b5080925081945050508261079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906111eb565b60405180910390fd5b5f815111156107bc57808060200190518101906107b991906112c1565b91505b819450505050509392505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126107fc576107fb6107db565b5b8235905067ffffffffffffffff811115610819576108186107df565b5b602083019150836001820283011115610835576108346107e3565b5b9250929050565b5f8060208385031215610852576108516107d3565b5b5f83013567ffffffffffffffff81111561086f5761086e6107d7565b5b61087b858286016107e7565b92509250509250929050565b5f8115159050919050565b61089b81610887565b82525050565b5f6020820190506108b45f830184610892565b92915050565b5f819050919050565b6108cc816108ba565b82525050565b5f6020820190506108e55f8301846108c3565b92915050565b6108f4816108ba565b81146108fe575f80fd5b50565b5f8135905061090f816108eb565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61095f82610919565b810181811067ffffffffffffffff8211171561097e5761097d610929565b5b80604052505050565b5f6109906107ca565b905061099c8282610956565b919050565b5f67ffffffffffffffff8211156109bb576109ba610929565b5b6109c482610919565b9050602081019050919050565b828183375f83830152505050565b5f6109f16109ec846109a1565b610987565b905082815260208101848484011115610a0d57610a0c610915565b5b610a188482856109d1565b509392505050565b5f82601f830112610a3457610a336107db565b5b8135610a448482602086016109df565b91505092915050565b5f8060408385031215610a6357610a626107d3565b5b5f610a7085828601610901565b925050602083013567ffffffffffffffff811115610a9157610a906107d7565b5b610a9d85828601610a20565b9150509250929050565b5f60208284031215610abc57610abb6107d3565b5b5f610ac984828501610901565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610b0482610ad2565b610b0e8185610adc565b9350610b1e818560208601610aec565b610b2781610919565b840191505092915050565b5f604082019050610b455f8301856108c3565b8181036020830152610b578184610afa565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610b92816108ba565b82525050565b5f610ba38383610b89565b60208301905092915050565b5f602082019050919050565b5f610bc582610b60565b610bcf8185610b6a565b9350610bda83610b7a565b805f5b83811015610c0a578151610bf18882610b98565b9750610bfc83610baf565b925050600181019050610bdd565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610c5a82610ad2565b610c648185610c40565b9350610c74818560208601610aec565b610c7d81610919565b840191505092915050565b5f610c938383610c50565b905092915050565b5f602082019050919050565b5f610cb182610c17565b610cbb8185610c21565b935083602082028501610ccd85610c31565b805f5b85811015610d085784840389528151610ce98582610c88565b9450610cf483610c9b565b925060208a01995050600181019050610cd0565b50829750879550505050505092915050565b5f6040820190508181035f830152610d328185610bbb565b90508181036020830152610d468184610ca7565b90509392505050565b7f547279696e6720746f2063616c6c20696e7465726e616c2066756e6374696f6e5f8201527f20776974682065787465726e616c206d65737361676500000000000000000000602082015250565b5f610da9603683610adc565b9150610db482610d4f565b604082019050919050565b5f6020820190508181035f830152610dd681610d9d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610e2157607f821691505b602082108103610e3457610e33610ddd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610e967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e5b565b610ea08683610e5b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610edb610ed6610ed1846108ba565b610eb8565b6108ba565b9050919050565b5f819050919050565b610ef483610ec1565b610f08610f0082610ee2565b848454610e67565b825550505050565b5f90565b610f1c610f10565b610f27818484610eeb565b505050565b5b81811015610f4a57610f3f5f82610f14565b600181019050610f2d565b5050565b601f821115610f8f57610f6081610e3a565b610f6984610e4c565b81016020851015610f78578190505b610f8c610f8485610e4c565b830182610f2c565b50505b505050565b5f82821c905092915050565b5f610faf5f1984600802610f94565b1980831691505092915050565b5f610fc78383610fa0565b9150826002028217905092915050565b610fe082610ad2565b67ffffffffffffffff811115610ff957610ff8610929565b5b6110038254610e0a565b61100e828285610f4e565b5f60209050601f83116001811461103f575f841561102d578287015190505b6110378582610fbc565b86555061109e565b601f19841661104d86610e3a565b5f5b828110156110745784890151825560018201915060208501945060208101905061104f565b86831015611091578489015161108d601f891682610fa0565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6110dd826108ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361110f5761110e6110a6565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f61116582611147565b61116f8185611151565b935061117f818560208601610aec565b80840191505092915050565b5f611196828461115b565b915081905092915050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f6111d5602083610adc565b91506111e0826111a1565b602082019050919050565b5f6020820190508181035f830152611202816111c9565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f611263602a83610adc565b915061126e82611209565b604082019050919050565b5f6020820190508181035f83015261129081611257565b9050919050565b6112a081610887565b81146112aa575f80fd5b50565b5f815190506112bb81611297565b92915050565b5f602082840312156112d6576112d56107d3565b5b5f6112e3848285016112ad565b91505092915050565b5f82825260208201905092915050565b5f61130682611147565b61131081856112ec565b9350611320818560208601610aec565b61132981610919565b840191505092915050565b5f6060820190508181035f83015261134c81866112fc565b905061135b60208301856108c3565b818103604083015261136d81846112fc565b905094935050505056fea2646970667358221220e136f53c0389f4a3fb6a44aed7feae5422b8fa1cec04a67443c61ac8c61933dc64736f6c634300081a0033",
  value: 1000000n,
  gas: 100000n,
  salt: BigInt(Math.floor(Math.random() * 10000)),
  shardId: 4,
  abi: [
    {
      inputs: [
        { internalType: "bytes", name: "_pubkey", type: "bytes" },
        {
          internalType: "address",
          name: "_retailerContractAddress",
          type: "address",
        },
      ],
      stateMutability: "payable",
      type: "constructor",
    },
    {
      inputs: [{ internalType: "string", name: "name", type: "string" }],
      name: "createProduct",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "getProducts",
      outputs: [
        { internalType: "uint256[]", name: "", type: "uint256[]" },
        { internalType: "string[]", name: "", type: "string[]" },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "nextProductId",
      outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      name: "products",
      outputs: [
        { internalType: "uint256", name: "id", type: "uint256" },
        { internalType: "string", name: "name", type: "string" },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        { internalType: "uint256", name: "messageHash", type: "uint256" },
        { internalType: "bytes", name: "authData", type: "bytes" },
      ],
      name: "verifyExternal",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "view",
      type: "function",
    },
    { stateMutability: "payable", type: "receive" },
  ] as Abi,
  args: [bytesToHex(pubkey), addressR],
});

await waitTillCompleted(client, 1, hashM);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Manufacturer address: ${addressM}`);

const hashFunds = await faucet.withdrawToWithRetry(
  addressR,
  convertEthToWei(1),
);

await waitTillCompleted(client, 1, hashFunds);

const hashProduct = await wallet.sendMessage({
  to: addressR,
  data: encodeFunctionData({
    abi: [
      {
        inputs: [
          { internalType: "address", name: "dst", type: "address" },
          { internalType: "string", name: "productName", type: "string" },
        ],
        name: "orderProduct",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "orderProduct",
    args: [addressM, "another-product"],
  }),
  gas: 100000n,
  value: 1000000n,
});

await waitTillCompleted(client, 1, hashProduct);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log("Product created!");

const hashGetProduct = await wallet.sendMessage({
  to: addressM,
  data: encodeFunctionData({
    abi: [
      {
        inputs: [
          { internalType: "bytes", name: "_pubkey", type: "bytes" },
          {
            internalType: "address",
            name: "_retailerContractAddress",
            type: "address",
          },
        ],
        stateMutability: "payable",
        type: "constructor",
      },
      {
        inputs: [{ internalType: "string", name: "name", type: "string" }],
        name: "createProduct",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "getProducts",
        outputs: [
          { internalType: "uint256[]", name: "", type: "uint256[]" },
          { internalType: "string[]", name: "", type: "string[]" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "nextProductId",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        name: "products",
        outputs: [
          { internalType: "uint256", name: "id", type: "uint256" },
          { internalType: "string", name: "name", type: "string" },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          { internalType: "uint256", name: "messageHash", type: "uint256" },
          { internalType: "bytes", name: "authData", type: "bytes" },
        ],
        name: "verifyExternal",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
      },
      { stateMutability: "payable", type: "receive" },
    ] as Abi,
    functionName: "getProducts",
    args: [],
  }),
  gas: 100000n,
  value: 1000000n,
});

await waitTillCompleted(client, 1, hashGetProduct);

// biome-ignore lint/nursery/noConsole: <explanation>
console.log(`Final hash: ${hashGetProduct}`);

const resultsCall = await client.call(
  {
    from: walletAddress,
    to: addressM,
    data: encodeFunctionData({
      abi: [
        {
          inputs: [
            { internalType: "bytes", name: "_pubkey", type: "bytes" },
            {
              internalType: "address",
              name: "_retailerContractAddress",
              type: "address",
            },
          ],
          stateMutability: "payable",
          type: "constructor",
        },
        {
          inputs: [{ internalType: "string", name: "name", type: "string" }],
          name: "createProduct",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "getProducts",
          outputs: [
            { internalType: "uint256[]", name: "", type: "uint256[]" },
            { internalType: "string[]", name: "", type: "string[]" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "nextProductId",
          outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          name: "products",
          outputs: [
            { internalType: "uint256", name: "id", type: "uint256" },
            { internalType: "string", name: "name", type: "string" },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            { internalType: "uint256", name: "hash", type: "uint256" },
            { internalType: "bytes", name: "signature", type: "bytes" },
          ],
          name: "verifyExternal",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "view",
          type: "function",
        },
        { stateMutability: "payable", type: "receive" },
      ] as Abi,
      functionName: "getProducts",
      args: [],
    }),
  },
  "latest",
);

// // biome-ignore lint/nursery/noConsole: <explanation>
// console.log(resultsCall);
